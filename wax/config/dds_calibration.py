import numpy as np

p_vs_amp = [(0.0, 4.4709388971684053e-07),
            (0.02, 0.0006855439642324888),
            (0.021, 0.000819672131147541),
            (0.022, 0.0009985096870342772),
            (0.023, 0.0011922503725782414),
            (0.025, 0.001669150521609538),
            (0.0275, 0.0024411326378539493),
            (0.028, 0.0026080476900149033),
            (0.0325, 0.004605067064083457),
            (0.035, 0.006110283159463488),
            (0.0375, 0.008047690014903129),
            (0.04, 0.010432190760059613),
            (0.045, 0.01639344262295082),
            (0.05, 0.024590163934426233),
            (0.06, 0.04858420268256334),
            (0.07, 0.0849478390461997),
            (0.08, 0.13412816691505217),
            (0.085, 0.1639344262295082),
            (0.09, 0.19821162444113266),
            (0.095, 0.23248882265275708),
            (0.1, 0.27570789865871836),
            (0.105, 0.3189269746646796),
            (0.11, 0.36661698956780925),
            (0.115, 0.4128166915052161),
            (0.12, 0.46497764530551416),
            (0.125, 0.5156482861400894),
            (0.13, 0.5692995529061102),
            (0.135, 0.6259314456035768),
            (0.14, 0.6780923994038748),
            (0.145, 0.7228017883755589),
            (0.1475, 0.7451564828614009),
            (0.15, 0.7645305514157973),
            (0.155, 0.8092399403874814),
            (0.16, 0.856929955290611),
            (0.165, 0.8941877794336811),
            (0.1675, 0.9165424739195231),
            (0.17, 0.9314456035767511),
            (0.175, 0.9582712369597615),
            (0.18, 0.9836065573770492),
            (0.185, 0.9985096870342772)]

p = [d[1] for d in p_vs_amp]
a = [d[0] for d in p_vs_amp]

class DDS_Amplitude_Calibration():

    def __init__(self):
        self.power_data = p
        self.amp_data = a

    def power_fraction_to_dds_amplitude(self,fraction_of_max):
        amp = np.interp(fraction_of_max,self.power_data,self.amp_data)
        return amp

    def dds_amplitude_to_power_fraction(self,amp):
        p_frac = np.interp(amp,self.amp_data,self.power_data)
        return p_frac
    
p_vs_vva = [(5.,182.),
            (4.,181.),
            (3.,178.),
            (2.85,173.),
            (2.75,168.),
            (2.65,161.),
            (2.6,159.),
            (2.55,155.),
            (2.5,151.),
            (2.45,148.),
            (2.4,145.),
            (2.35,141.),
            (2.3,138.),
            (2.25,133.),
            (2.2,130.),
            (2.15,126.),
            (2.1,123.),
            (2.05,118.),
            (2.,114.),
            (1.95,111.),
            (1.9,106.),
            (1.85,102.),
            (1.8,98.),
            (1.75,94.),
            (1.7,90.),
            (1.65,86.),
            (1.6,82.),
            (1.55,78.),
            (1.5,73.),
            (1.45,70.),
            (1.4,66.),
            (1.35,62.),
            (1.3,57.),
            (1.25,54.),
            (1.2,49.),
            (1.15,45.),
            (1.1,41.),
            (1.05,37.),
            (1.,33.),
            (.95,29.),
            (.9,25.),
            (.85,22.),
            (.8,18.),
            (.75,15.),
            (.7,11.5),
            (.65,8.4),
            (.6,5.7),
            (.55,3.4),
            (.5,1.6),
            (.45,.52),
            (.425,.21),
            (.4,.059),
            (.3,.006),
            (.0,0.)]

p_vs_vva.sort(key=lambda x: x[1])

p_vva = [d[1] for d in p_vs_vva]
p_vva = p_vva / np.max(p_vva)
v_vva = [d[0] for d in p_vs_vva]
    
class DDS_VVA_Calibration():

    def __init__(self):
        self.power_data = p_vva
        self.vva_data = v_vva

    def power_fraction_to_vva(self,fraction_of_max):
        vva = np.interp(fraction_of_max,self.power_data,self.vva_data)
        return vva

    def vva_to_power_fraction(self,v_vva):
        p_frac = np.interp(v_vva,self.vva_data,self.power_data)
        return p_frac
    